import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { assert } from "@cosmjs/utils";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { Dispatch, SetStateAction, useContext, useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { GlobalContext, VerifiedBeacon } from "./GlobalState";
import { approxDateFromTimestamp, noisOracleAddress, querySubmissions } from "./oracle";

assert(process.env.NEXT_PUBLIC_ENDPOINT, "NEXT_PUBLIC_ENDPOINT must be set");
const rpcEndpoint = process.env.NEXT_PUBLIC_ENDPOINT;

async function loadLatest(itemsPerPage: number, addItems: (items: VerifiedBeacon[]) => void) {
  console.log("Running loadLatest() ...");

  const client = await CosmWasmClient.connect(rpcEndpoint);

  const request = {
    beacons_desc: { start_after: null, limit: itemsPerPage },
  };
  console.log("Query request:", JSON.stringify(request));
  const response = await client.queryContractSmart(noisOracleAddress, request);
  for (const beacon of response.beacons) {
    const { round, randomness, published, verified } = beacon;
    const diff = Number(BigInt(verified) - BigInt(published)) / 1_000_000_000;
    const verifiedBeacon: VerifiedBeacon = {
      round: round,
      randomness: randomness,
      published: approxDateFromTimestamp(published),
      verified: approxDateFromTimestamp(verified),
      diff: diff,
    };
    addItems([verifiedBeacon]);
  }

  // Repeat but with small number of items
  setTimeout(() => loadLatest(10, addItems), 9_000);
}

interface MissingBeacon {
  readonly round: number;
}

type DisplayBeacon = VerifiedBeacon | MissingBeacon;

function isVerifiedBeacon(beacon: DisplayBeacon): beacon is VerifiedBeacon {
  return typeof (beacon as VerifiedBeacon).diff === "number";
}

const Home: NextPage = () => {
  const { state, addItems } = useContext(GlobalContext);

  useEffect(() => {
    loadLatest(50, addItems);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const [displayBeacons, setBeacons] = useState<DisplayBeacon[]>([]);
  useEffect(() => {
    let out = new Array<DisplayBeacon>();
    for (let r = state.highest; r >= state.lowest; r -= 1) {
      const found = state.beacons.get(r);
      if (found) out.push(found);
      else out.push({ round: r });
    }
    setBeacons(out);
  }, [state]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Nois Oracle</h1>

        <div className={styles.grid}>
          {displayBeacons.map((beacon) => {
            return (
              <div key={beacon.round} className={styles.card}>
                <h2>#{beacon.round}</h2>
                {isVerifiedBeacon(beacon) ? (
                  <>
                    <p>
                      <code>{beacon.randomness}</code>
                    </p>
                    <p>
                      Published: {beacon.published.toUTCString()}, verified:{" "}
                      {beacon.verified.toUTCString()}, diff: {beacon.diff.toFixed(2)}s
                    </p>
                  </>
                ) : (
                  <strong>missing!</strong>
                )}
              </div>
            );
          })}
        </div>
      </main>

      <footer className={styles.footer}>Make love</footer>
    </div>
  );
};

export default Home;
